//Code from Category.js
static all = []
    static categoryForm = document.getElementById("form-container")
    static categoryContainer = document.getElementById("category-container")
    static categoryList = document.getElementById("category-list")


    constructor(name){
        this.name = name 
        this.element = document.createElement("li")
        this.element.id = `category-${this.name}`
        Category.all.push(this)
    }


    //Index function, pulls all categories
   static grabCategories(){
       fetch(category_url)
       .then(resp => resp.json())
       .then(categories => {
           for(const category of categories){
               let c = new Category(category.name)
               c.addCatToDOM()
           }
       })
   }

   categoryHTML(){
    this.element.innerHTML +=`
        <h3>${this.name}</h3>
    
    `
    return this.element
   }

   addCatToDOM(){
       Category.categoryList.append(this.categoryHTML())
   }


static renderForm(){
    Category.categoryForm.innerHTML +=`
    <form id="new-category-form">
    Name: <input type="text" id="name"><br>
    Submit: <input type="submit" id="create">
    </form>
    `
}

createCategory(){
    const category = {
        name: document.getElementById("name")
    }
    debugger

}


//code from pattern.js
  static all = []

    //object passed in for destructuring assignment later in grab patterns
    constructor({name, difficulty, description, yarn, category_id}){
        this.name = name
        this.difficulty = difficulty
        this.description = description
        this.yarn = yarn
        this.category_id = category_id

        this.element = document.createElement("li")
        this.element.id = `pattern-${this.name}`
        Pattern.all.push(this)
    }



    //use fetch data to display in pattern container
    static grabPatterns(){
        fetch(pattern_url)
        .then(resp => resp.json())
        .then(patterns => {
            for (const pattern of patterns){
                let p = new Pattern(pattern)
                p.addToDOM()
            }
        })
    }

    patternHTML(){
        this.element.innerHTML += `
            <h3>${this.name}</h3>
            <p>${this.description}</p>
        
        `
        return this.element
    }

    addToDOM(){
        patternContainer.append(this.patternHTML())
    }

//Code from index.js 
const pattern_url = base_url + "/patterns"
const category_url = base_url + "/categories"

const patternContainer = document.getElementById("pattern-container")


Category.grabCategories()
Category.renderForm()
Category.categoryForm.addEventListener("submit", submitCategory())


function submitCategory(e){
    e.preventDefault()
    createCategory()
}

function catClick(){
    debugger
}